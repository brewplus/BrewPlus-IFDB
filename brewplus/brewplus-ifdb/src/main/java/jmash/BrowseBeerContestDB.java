/*
 * BrowseBeerContestDB.java
 *
 * Created on 17 settembre 2008, 19.25
 */

package jmash;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingConstants;

import org.apache.log4j.Logger;

/**
 *
 * @author Alessandro
 */
public class BrowseBeerContestDB extends javax.swing.JInternalFrame {

	private static Logger LOGGER = Logger.getLogger(BrowseBeerContestDB.class);

	private List<StyleTreeNode> styleNodes = new ArrayList<StyleTreeNode>();
	private String html = "";
	GridLayout gl = new GridLayout();
	private static final int COLUMNS = 3;

	/** Creates new form BrowseTastyBrew */
	public BrowseBeerContestDB() {
		initComponents();
		setBorder(Utils.getDefaultBorder());
		pnl.setBackground(Color.white);
		try {
			lblTitle.setIcon(new ImageIcon(new URL("http://beer.tzo.com/beer/art/beermug1.gif")));
			html = Utils.download("http://beer.tzo.com/beer/asp/recipe.asp").toLowerCase();
		} catch (Exception ex) {
			Utils.showException(ex, "", this);
		}
		int i = html.indexOf("<select name=\"category\" size=\"1\">".toLowerCase());

		int j = html.indexOf("<option value=", i);
		int k = html.indexOf("</option>", j);
		while (j >= 0 && k >= 0) {
			j = html.indexOf("<option value=", i);
			if (j >= 0) {
				j = html.indexOf(">", j);
				k = html.indexOf("</option>", j);
				String S = html.substring(j + 1, k);
				// System.out.println(S);
				styleNodes.add(new StyleTreeNode(S, S));
			}
			/*
			 * int m=html.indexOf(". ",j); if((j>=0 && k>=0)){ String
			 * S=html.substring(j+3,k); String T=S.substring(0,S.indexOf(". "));
			 * String D=S.substring(S.indexOf(". ")+2); styleNodes.add(new
			 * StyleTreeNode(T, S)); }
			 **/
			i = k;

		}

		gl.setColumns(COLUMNS);
		gl.setRows(styleNodes.size() / COLUMNS + styleNodes.size() % COLUMNS);
		gl.setVgap(2);
		this.pnl.setLayout(gl);
		for (StyleTreeNode node : styleNodes) {
			this.pnl.add(node);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		pnl = new javax.swing.JPanel();
		lblTitle = new javax.swing.JLabel();

		setClosable(true);
		setIconifiable(true);
		setMaximizable(true);
		setResizable(true);
		setTitle("Browse BeerContestDB");
		setFont(getFont());

		org.jdesktop.layout.GroupLayout pnlLayout = new org.jdesktop.layout.GroupLayout(pnl);
		pnl.setLayout(pnlLayout);
		pnlLayout.setHorizontalGroup(
				pnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 593, Short.MAX_VALUE));
		pnlLayout.setVerticalGroup(
				pnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 375, Short.MAX_VALUE));

		jScrollPane1.setViewportView(pnl);

		getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
		getContentPane().add(lblTitle, java.awt.BorderLayout.NORTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel lblTitle;
	private javax.swing.JPanel pnl;
	// End of variables declaration//GEN-END:variables

	public class StyleTreeNode extends JButton {
		/**
		 *
		 */
		private static final long serialVersionUID = 9142284801436841375L;
		private String idStile;
		private String stile;
		private String des;
		private JButton jb = new JButton("Torna a Tutti gli stili",
				new ImageIcon(BrowseHobbyBirra2.class.getResource("/jmash/images/up.png")));

		public StyleTreeNode(String stile, String des) {

			super(des, new ImageIcon(BrowseHobbyBirra2.class.getResource("/jmash/images/folder.png")));
			this.stile = stile;
			idStile = "" + stile;
			this.des = des;
			setAlignmentX(Component.LEFT_ALIGNMENT);
			setMaximumSize(BTN_DIM);
			setSize(BTN_DIM);
			setPreferredSize(BTN_DIM);
			setHorizontalAlignment(SwingConstants.LEFT);
			this.jb.setMaximumSize(BTN_DIM);
			this.jb.setSize(BTN_DIM);
			this.jb.setPreferredSize(BTN_DIM);
			this.setBorderPainted(false);
			this.setBackground(pnl.getBackground());
			this.jb.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					pnl.removeAll();
					gl.setColumns(COLUMNS);
					gl.setRows(styleNodes.size() / COLUMNS + styleNodes.size() % COLUMNS);

					gl.setVgap(2);
					for (StyleTreeNode node : styleNodes) {
						pnl.add(node);
					}
					pnl.updateUI();
				}
			});

			addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {

					Thread th = new Thread() {
						@Override
						public void run() {
							setEnabled(false);
							show();
							setEnabled(true);
						}
					};
					th.start();
				}
			});
		}

		public String getIdStile() {
			return this.idStile;
		}

		@Override
		public void show() {
			pnl.removeAll();
			Thread th = new Thread() {
				@Override
				public void run() {
					readRecipesForStyle(stile, jb);
				}
			};
			th.start();
			// pnl.add(jb,newConstraint(0));
			pnl.updateUI();
		}

		public String getDes() {
			return this.des;
		}

		public void setDes(String des) {
			this.des = des;
			setText(des);
		}
	}

	private Dimension BTN_DIM = new Dimension(240, 32);

	public GridBagConstraints newConstraint(int i) {
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new java.awt.Insets(2, 2, 2, 2);
		c.gridx = i % 4;
		c.gridy = i / 4;
		return c;
	}

	public static String httpPost(String style) throws Exception {
		URL url;
		URLConnection urlConn;
		DataOutputStream printout;
		DataInputStream input;
		// URL of CGI-Bin script.
		url = new URL("http://beer.tzo.com/beer/asp/item_recipe.asp");
		// URL connection channel.
		urlConn = url.openConnection();
		// Let the run-time system (RTS) know that we want input.
		urlConn.setDoInput(true);
		// Let the RTS know that we want to do output.
		urlConn.setDoOutput(true);
		// No caching, we want the real thing.
		urlConn.setUseCaches(false);
		// Specify the content type.
		urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		// Send POST output.
		printout = new DataOutputStream(urlConn.getOutputStream());
		String content = "category=" + URLEncoder.encode(style, "UTF-8") + "&DB=" + URLEncoder.encode("beer")
				+ "&VersionNum=" + URLEncoder.encode("20020916");
		printout.writeBytes(content);
		printout.flush();
		printout.close();
		// Get response data.
		input = new DataInputStream(urlConn.getInputStream());
		String res = "";
		String str;
		while (null != ((str = input.readLine()))) {
			res += str;
		}
		input.close();
		return res;
	}

	public void readRecipesForStyle(String style, JButton jb) {
		try {
			List<RecipeTreeNode> nodes = new ArrayList<RecipeTreeNode>();

			html = httpPost(style).toLowerCase();
			String k = "<a href=\"/beer/asp/report_recipe.asp?RegNum=".toLowerCase();
			int i = html.indexOf(k);

			while (i >= 0) {
				int h = html.indexOf(k, i) + k.length();
				int j = html.indexOf("&", h);
				String num = html.substring(h, j);

				h = html.indexOf(">", j) + 1;
				j = html.indexOf("<", h);
				String nome = html.substring(h, j);

				h = html.indexOf("<td>", j) + "<td>".length();
				j = html.indexOf("</td>", h);
				String brewer = html.substring(h, j).replaceAll("&nbsp;", "");

				h = html.indexOf("<td>", j) + "<td>".length();
				j = html.indexOf("</td>", h);
				String location = html.substring(h, j).replaceAll("&nbsp;", "");

				h = html.indexOf("<td>", j) + "<td>".length();
				j = html.indexOf("</td>", h);
				String club = html.substring(h, j).replaceAll("&nbsp;", "");

				h = html.indexOf("<td>", j) + "<td>".length();
				j = html.indexOf("</td>", h);
				String contest = html.substring(h, j).replaceAll("&nbsp;", "");

				h = html.indexOf("<td>", j) + "<td>".length();
				j = html.indexOf("</td>", h);
				String place = html.substring(h, j).replaceAll("&nbsp;", "");

				RecipeTreeNode N = new RecipeTreeNode(new Integer(num),
						nome + " by " + brewer + (place.length() > 0 ? "(" + contest + ":" + place + ")" : ""));
				nodes.add(N);
				i = html.indexOf(k, i + k.length());
			}

			i = 0;
			gl.setColumns(1);
			gl.setRows(nodes.size() + 1);
			gl.setVgap(2);
			i = 0;
			this.pnl.add(jb);
			for (RecipeTreeNode node : nodes) {
				this.pnl.add(node);
			}
			repaint();

		} catch (Exception ex) {
			Utils.showException(ex, "", this);
		}
	}

	public class RecipeTreeNode extends JButton implements Comparable<RecipeTreeNode> {
		private int id;
		private String des;

		public RecipeTreeNode(int id, String des) {

			super(des, new ImageIcon(BrowseHobbyBirra2.class.getResource("/jmash/images/ingredients.jpg")));
			this.id = id;
			this.des = des;
			setAlignmentX(Component.LEFT_ALIGNMENT);
			setMaximumSize(BTN_DIM);
			setSize(BTN_DIM);
			setPreferredSize(BTN_DIM);
			setHorizontalAlignment(SwingConstants.LEFT);

			this.id = id;

			setHorizontalAlignment(SwingConstants.LEFT);
			this.setBorderPainted(false);
			this.setBackground(pnl.getBackground());
			addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					Thread th = new Thread() {
						@Override
						public void run() {
							setEnabled(false);
							show();
							setEnabled(true);
						}
					};
					th.start();
				}
			});
		}

		@Override
		public int compareTo(RecipeTreeNode e) {
			return des.compareTo(e.getDes());
		}

		@Override
		public void show() {
			parseRecipe(id, des);

		}

		public String getDes() {
			return this.des;
		}

		public void setDes(String des) {
			this.des = des;
			setText(des);
		}
	}

	public static void parseRecipe(int n, String des) {
		String html = null;
		RecipeData rd = new RecipeData();
		try {
			html = Utils.download(
					"http://beer.tzo.com/beer/asp/report_recipe.asp?RegNum=" + n + "&DB=beer&VersionNum=20020916")
					.toLowerCase();
		} catch (Exception ex) {
			LOGGER.error(ex.getMessage(), ex);
		}
		// System.out.println(html);
		List<Malt> malts = new ArrayList<Malt>();
		List<Hop> hops = new ArrayList<Hop>();
		List<Yeast> yeasts = new ArrayList<Yeast>();

		int i, j, h, k;
		i = html.indexOf("<b>fermentables </b>");
		i = html.indexOf("<td>temp</td>", i) + "<td>temp</td>".length();
		j = html.indexOf("<td colspan=6><b>hops</b>", i);

		while (i < j && i > 0) {
			i = html.indexOf("<td>", i) + "<td>".length();
			k = html.indexOf("&nbsp;</td>", i);
			String lbs = html.substring(i, k);
			lbs = lbs.replaceAll("lb.", "");
			lbs = lbs.replaceAll("lb", "");
			lbs = lbs.replaceAll("lbs.", "");
			lbs = lbs.replaceAll("lbs", "");
			// System.out.println("lbs="+lbs);
			i = html.indexOf("<td colspan=2>", i) + "<td colspan=2>".length();
			k = html.indexOf("&nbsp;</td>", i);
			if (!(i < j && i > 0))
				break;
			MaltType T = Main.getMaltTypeByWords(html.substring(i, k));
			Malt m = T == null ? new Malt() : new Malt(T);
			m.setNome(html.substring(i, k));
			m.setGrammi(Utils.poundsToGrams(Double.parseDouble(lbs)));
			malts.add(m);
			i = html.indexOf("</tr>", i);
		}

		i = html.indexOf("<td colspan=6><b>hops</b>");
		i = html.indexOf("<td>%AA</td>".toLowerCase(), i) + "<td>%AA</td>".length();
		j = html.indexOf("<td colspan=6><b>SPECIAL INGREDIENTS:<b></td>".toLowerCase(), i);

		while (i < j && i > 0) {
			int t = i;
			i = html.indexOf("<td>", i) + "<td>".length();
			if (i < t)
				break;
			k = html.indexOf("&nbsp;</td>", i);
			String lbs = html.substring(i, k);
			lbs = lbs.replaceAll("oz.", "");
			lbs = lbs.replaceAll("oz", "");
			lbs = lbs.replaceAll("lbs.", "");
			lbs = lbs.replaceAll("lbs", "");
			// System.out.println("oz="+lbs);

			i = html.indexOf("<td>", i) + "<td>".length();
			k = html.indexOf("&nbsp;</td>", i);
			if (i < t)
				break;
			if (!(i < j && i > 0))
				break;
			String type = html.substring(i, k);

			i = html.indexOf("<td>", i) + "<td>".length();
			k = html.indexOf("&nbsp;</td>", i);
			if (i < t)
				break;
			if (!(i < j && i > 0))
				break;
			String name = html.substring(i, k);

			i = html.indexOf("<td>", i) + "<td>".length();
			k = html.indexOf("&nbsp;</td>", i);
			if (i < t)
				break;
			if (!(i < j && i > 0))
				break;
			String use = html.substring(i, k);

			i = html.indexOf("<td>", i) + "<td>".length();
			k = html.indexOf("&nbsp;</td>", i);
			if (i < t)
				break;
			if (!(i < j && i > 0))
				break;
			String time = html.substring(i, k);
			time = time.replaceAll("min.", "");
			time = time.replaceAll("min", "");

			i = html.indexOf("<td>", i) + "<td>".length();
			k = html.indexOf("&nbsp;</td>", i);
			if (i < t)
				break;
			if (!(i < j && i > 0))
				break;
			String aa = html.substring(i, k);

			HopType T = Main.getHopTypeByDes(name);
			Hop m = T == null ? new Hop() : new Hop(T);
			m.setNome(name);
			m.setForma(type);
			m.setUso(use);
			m.setBoilTime(Integer.parseInt(time));

			m.setGrammi(Utils.ouncesToGrams(Double.parseDouble(lbs)));
			hops.add(m);
			i = html.indexOf("</tr>", i);

		}

		rd.setMalts(malts);
		rd.setHops(hops);
		rd.setYeasts(yeasts);
		rd.setNome(des);
		Ricetta R = new Ricetta();
		R.fromRecipeData(rd);
		Main.gui.addFrame(R);

	}
}
