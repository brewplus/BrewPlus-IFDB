/*
 
 *
 *  This file is part of BrewPlus.
 *
 *  BrewPlus is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  BrewPlus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BrewPlus; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package jmash;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import org.jdom.Element;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author AChiari
 */
public class PanelDegustazione extends javax.swing.JPanel {
	JPanel pnl[] = new JPanel[8];
	JRadioButton btns[][] = new JRadioButton[8][5];
	String titles[] = new String[] { "schiuma", "aspetto", "intensità olfattiva", "finezza olfattiva", "frizzantezza",
			"corpo", "amaro", "persistenza", };

	/** Creates new form PanelDegustazione */
	public PanelDegustazione() {
		initComponents();

		for (int i = 0; i < 8; i++) {
			pnl[i] = new JPanel();
			pnl[i].setBorder(javax.swing.BorderFactory.createTitledBorder(titles[i]));
			pnl[i].setPreferredSize(new java.awt.Dimension(200, 65));
			pnl[i].setLayout(new FlowLayout());
			jPanel2.add(pnl[i]);
			javax.swing.ButtonGroup group = new javax.swing.ButtonGroup();
			for (int j = 0; j < 5; j++) {
				btns[i][j] = new JRadioButton("" + (j + 1));
				group.add(btns[i][j]);
				pnl[i].add(btns[i][j]);
				if (j == 0)
					btns[i][j].setSelected(true);
				btns[i][j].addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent ev) {
						calc();
					}
				});

			}
		}
		JFreeChart chart = createChart();
		ChartPanel chartPanel = new PolarChartPanel(chart);
		add(chartPanel, java.awt.BorderLayout.CENTER);
		calc();
	}

	private XYSeries series = new XYSeries("");

	public void calc() {

		// series.clear();
		for (int i = 0; i < 8; i++) {
			int votes = 0;
			for (int j = 0; j < 5; j++) {
				if (btns[i][j].isSelected())
					votes = j + 1;
			}
			series.addOrUpdate(45 * i, votes);
		}
		series.fireSeriesChanged();
	}

	public Element toXml() {
		Element degu = new Element("degu");
		String votes = "";
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 5; j++) {
				if (btns[i][j].isSelected())
					votes += "" + (j + 1);
			}
		}
		degu.setText(votes);
		return degu;
	}

	public void fromXml(Element degu) {
		String S = degu.getValue();
		for (int i = 0; i < 8; i++) {
			int j = new Integer("" + S.charAt(i)) - 1;
			btns[i][j].setSelected(true);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jPanel2 = new javax.swing.JPanel();

		setLayout(new java.awt.BorderLayout());

		jPanel1.setPreferredSize(new java.awt.Dimension(250, 100));
		jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

		jScrollPane1.setPreferredSize(new java.awt.Dimension(256, 106));

		jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));
		jScrollPane1.setViewportView(jPanel2);

		jPanel1.add(jScrollPane1);

		add(jPanel1, java.awt.BorderLayout.WEST);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables

	class MyPolarPlot extends PolarPlot {
		List angleTicks = new java.util.ArrayList();

		public MyPolarPlot() {
			// la schiuma, l'aspetto, l'intensità olfattiva, la finezza
			// olfattiva, la frizzantezza, il corpo, l'amaro e la persistenza
			// retrolfattiva.
			for (int i = 0; i < 8; i++) {
				this.angleTicks
						.add(new NumberTick(new Double(45 * i), titles[i], TextAnchor.CENTER, TextAnchor.CENTER, 0.0));
			}
		}

		@Override
		protected void drawGridlines(Graphics2D g2, Rectangle2D dataArea, List angularTicks, List radialTicks) {
			super.drawGridlines(g2, dataArea, angleTicks, radialTicks);
		}
	}

	private JFreeChart createChart() {
		XYSeriesCollection data = new XYSeriesCollection();
		data.addSeries(series);

		PolarPlot plot = new MyPolarPlot();

		plot.setDataset(data);
		NumberAxis rangeAxis = new NumberAxis();
		rangeAxis.setAxisLineVisible(false);
		rangeAxis.setTickMarksVisible(false);
		rangeAxis.setTickLabelInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
		rangeAxis.setRange(0, 5);
		plot.setAxis(rangeAxis);
		plot.setRenderer(new DefaultPolarItemRenderer());
		JFreeChart chart = new JFreeChart("Giudizio", JFreeChart.DEFAULT_TITLE_FONT, plot, false);
		DefaultPolarItemRenderer renderer = (DefaultPolarItemRenderer) plot.getRenderer();
		plot.setBackgroundAlpha(0.3f);
		((NumberAxis) plot.getAxis()).setTickLabelsVisible(false);
		renderer.setSeriesFilled(0, true);
		renderer.setSeriesPaint(0, Color.GREEN);
		chart.setBackgroundPaint(Color.white);
		return chart;
	}
}
