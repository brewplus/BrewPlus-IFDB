/*

 *
 *  This file is part of BrewPlus.
 *
 *  BrewPlus is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  BrewPlus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BrewPlus; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package jmash;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Insets;
import java.awt.image.BufferedImage;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import jmash.tableModel.NumberFormatter;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author Alessandro
 */

public class CorrezioneDensimetro extends javax.swing.JInternalFrame {

	/**
	 *
	 */
	private static final long serialVersionUID = 4455686160997506344L;

	GlassPanel glassPanel = new GlassPanel();
	GlassPanel glassPanel2 = new GlassPanel();

	/** Creates new form CorrezioneDensimetro */
	public CorrezioneDensimetro() {
		initComponents();
		setBorder(Utils.getDefaultBorder());
		this.jPanel1.add(this.glassPanel);
		this.jPanel4.add(this.glassPanel2);
		this.jPanel3.add(createDemoPanel(), BorderLayout.CENTER);
		pack();
		fldT.setModel(Main.getFromCache("CorrezioneDensimetro.T", 25.0), 0.0, 100.0, 1.0, "0.0",
				"CorrezioneDensimetro.T");
		fldTC.setModel(Main.getFromCache("CorrezioneDensimetro.TC", 20.0), 0.0, 100.0, 1.0, "0.0",
				"CorrezioneDensimetro.TC");
		fldG.setGravity(Main.getFromCache("CorrezioneDensimetro.G", 1.040));
		rifrattometroMS.setModel(Main.getFromCache("LetturaRifrattometro.Brix", 0.0), 0.0, 100.00, 0.1, "0.0",
				"LetturaRifrattometro.Brix");
		correzioneMS.setModel(Main.getFromCache("LetturaRifrattometro.Correzione", 1.040), 1.000, 1.999, 0.010, "0.000",
				"LetturaRifrattometro.Correzione");
		DIFermetazioneGS.setGravity(Main.getFromCache("LetturaRifrattometro.DensitaIniziale", 1.040));

		calc();
		calcLetturaRifrattometro();
	}

	// private boolean flag=false;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanel6 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		fldT = new jmash.component.JTemperatureSpinner();
		fldTC = new jmash.component.JTemperatureSpinner();
		fldG = new jmash.component.JGravitySpinner();
		fldGC = new jmash.component.JGravitySpinner();
		jPanel1 = new javax.swing.JPanel();
		jPanel4 = new javax.swing.JPanel();
		jPanel7 = new javax.swing.JPanel();
		jPanel10 = new javax.swing.JPanel();
		jLabel5 = new javax.swing.JLabel();
		correzioneMS = new jmash.component.JMashSpinner();
		rifrattometroMS = new jmash.component.JMashSpinner();
		jLabel7 = new javax.swing.JLabel();
		jPanel8 = new javax.swing.JPanel();
		densityGS = new jmash.component.JGravitySpinner();
		jPanel9 = new javax.swing.JPanel();
		jLabel9 = new javax.swing.JLabel();
		DIFermetazioneGS = new jmash.component.JGravitySpinner();
		jLabel10 = new javax.swing.JLabel();
		DFFermentazioneGS = new jmash.component.JGravitySpinner();

		setClosable(true);
		setIconifiable(true);
		setTitle("Lettura Densità");

		jPanel6.setLayout(new java.awt.GridBagLayout());

		jPanel2.setLayout(new java.awt.GridBagLayout());

		jLabel1.setFont(jLabel1.getFont());
		jLabel1.setText("T. lettura");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		jPanel2.add(jLabel1, gridBagConstraints);

		jLabel3.setFont(jLabel3.getFont());
		jLabel3.setText("Densità letta");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		jPanel2.add(jLabel3, gridBagConstraints);

		jLabel4.setFont(jLabel4.getFont());
		jLabel4.setText("Densità corretta");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		jPanel2.add(jLabel4, gridBagConstraints);

		jLabel2.setFont(jLabel2.getFont());
		jLabel2.setText("T. calibrazione");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		jPanel2.add(jLabel2, gridBagConstraints);

		jPanel3.setPreferredSize(new java.awt.Dimension(300, 150));
		jPanel3.setLayout(new java.awt.BorderLayout());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.ipady = 100;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
		gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 10);
		jPanel2.add(jPanel3, gridBagConstraints);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
		jPanel2.add(jPanel5, gridBagConstraints);

		fldT.setFont(fldT.getFont());
		fldT.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				fldTStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel2.add(fldT, gridBagConstraints);

		fldTC.setFont(fldTC.getFont());
		fldTC.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				fldTCStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel2.add(fldTC, gridBagConstraints);

		fldG.setFont(fldG.getFont());
		fldG.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				fldGStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel2.add(fldG, gridBagConstraints);

		fldGC.setEnabled(false);
		fldGC.setFont(fldGC.getFont());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel2.add(fldGC, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel6.add(jPanel2, gridBagConstraints);

		jPanel1.setMaximumSize(new java.awt.Dimension(80, 400));
		jPanel1.setMinimumSize(new java.awt.Dimension(80, 400));
		jPanel1.setPreferredSize(new java.awt.Dimension(80, 400));
		jPanel1.setRequestFocusEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
		jPanel6.add(jPanel1, gridBagConstraints);

		jPanel4.setMaximumSize(new java.awt.Dimension(80, 400));
		jPanel4.setMinimumSize(new java.awt.Dimension(80, 400));
		jPanel4.setPreferredSize(new java.awt.Dimension(80, 400));
		jPanel4.setRequestFocusEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
		jPanel6.add(jPanel4, gridBagConstraints);

		jTabbedPane1.addTab("Correzione Densimetro", jPanel6);

		jPanel7.setLayout(new java.awt.GridBagLayout());

		jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Dati Generali"));
		jPanel10.setLayout(new java.awt.GridBagLayout());

		jLabel5.setText("Lettura Rifrattometro");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		jPanel10.add(jLabel5, gridBagConstraints);

		correzioneMS.setValue(1.040);
		correzioneMS.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				correzioneMSStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel10.add(correzioneMS, gridBagConstraints);

		rifrattometroMS.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				rifrattometroMSStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel10.add(rifrattometroMS, gridBagConstraints);

		jLabel7.setText("Fattore Correzione");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		jPanel10.add(jLabel7, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel7.add(jPanel10, gridBagConstraints);

		jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Conversione"));
		jPanel8.setLayout(new java.awt.GridBagLayout());

		densityGS.setEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel8.add(densityGS, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel7.add(jPanel8, gridBagConstraints);

		jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Stima Densità Finale"));
		jPanel9.setLayout(new java.awt.GridBagLayout());

		jLabel9.setText("Iniziale");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		jPanel9.add(jLabel9, gridBagConstraints);

		DIFermetazioneGS.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				DIFermetazioneGSStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		jPanel9.add(DIFermetazioneGS, gridBagConstraints);

		jLabel10.setText("Stima Finale");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		jPanel9.add(jLabel10, gridBagConstraints);

		DFFermentazioneGS.setEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		jPanel9.add(DFFermentazioneGS, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		jPanel7.add(jPanel9, gridBagConstraints);

		jTabbedPane1.addTab("Rifrattometro", jPanel7);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
				721, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jTabbedPane1,
				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE));

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		setBounds((screenSize.width - 733) / 2, (screenSize.height - 537) / 2, 733, 537);
	}// </editor-fold>//GEN-END:initComponents

	private void fldGStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_fldGStateChanged
		calc();
	}// GEN-LAST:event_fldGStateChanged

	private void fldTCStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_fldTCStateChanged
		calc();
	}// GEN-LAST:event_fldTCStateChanged

	private void fldTStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_fldTStateChanged
		calc();
	}// GEN-LAST:event_fldTStateChanged

	private void correzioneMSStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_correzioneMSStateChanged
		calcLetturaRifrattometro();
	}// GEN-LAST:event_correzioneMSStateChanged

	private void rifrattometroMSStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_rifrattometroMSStateChanged
		calcLetturaRifrattometro();
	}// GEN-LAST:event_rifrattometroMSStateChanged

	private void DIFermetazioneGSStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_DIFermetazioneGSStateChanged
		calcLetturaRifrattometro();
	}// GEN-LAST:event_DIFermetazioneGSStateChanged

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private jmash.component.JGravitySpinner DFFermentazioneGS;
	private jmash.component.JGravitySpinner DIFermetazioneGS;
	private jmash.component.JMashSpinner correzioneMS;
	private jmash.component.JGravitySpinner densityGS;
	private jmash.component.JGravitySpinner fldG;
	private jmash.component.JGravitySpinner fldGC;
	private jmash.component.JTemperatureSpinner fldT;
	private jmash.component.JTemperatureSpinner fldTC;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel10;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JTabbedPane jTabbedPane1;
	private jmash.component.JMashSpinner rifrattometroMS;
	// End of variables declaration//GEN-END:variables

	private void calcLetturaRifrattometro() {
		Main.putIntoCache("LetturaRifrattometro.Brix", rifrattometroMS.getValue());
		Main.putIntoCache("LetturaRifrattometro.Correzione", correzioneMS.getValue());
		Main.putIntoCache("LetturaRifrattometro.DensitaIniziale", DIFermetazioneGS.getGravity());
		double brix = Utils.parseDouble(rifrattometroMS.getValue().toString());
		double correzione = Utils.parseDouble(correzioneMS.getValue().toString());
		double densita = (261 / (261 - (brix / correzione)));

		// double diBrix = - correzione * (261/DIFermetazioneGS.getGravity() -
		// 261);
		double diBrix = Utils.SG2Plato(DIFermetazioneGS.getGravity()) * correzione;

		double stimaBrix = ((1.53 * brix) - (0.59 * diBrix));

		double stima = (261 / (261 - (stimaBrix / correzione)));

		densityGS.setGravity(densita);
		DFFermentazioneGS.setGravity(stima);
	}

	XYPointerAnnotation pointer = null;
	XYSeriesCollection dataset = new XYSeriesCollection();
	XYSeries series1 = new XYSeries("series1");
	XYSeries series2 = new XYSeries("series2");
	XYSeries series3 = new XYSeries("series3");

	private void calc() {
		double t = Utils.C2F(fldT.getTemperature());
		Main.putIntoCache("CorrezioneDensimetro.T", fldT.getTemperature());
		Main.putIntoCache("CorrezioneDensimetro.TC", fldTC.getTemperature());
		Main.putIntoCache("CorrezioneDensimetro.G", fldG.getGravity());
		double T = t;
		double tc = Utils.C2F(fldTC.getTemperature());
		double ir = fldG.getGravity();
		double cr = ir * SG60(t) / SG60(tc);
		double CR = cr;
		fldGC.setGravity(cr);
		this.glassPanel.setDensita(cr);
		this.glassPanel2.setDensita(ir);
		this.series1.clear();
		this.series3.clear();
		this.series2.clear();
		this.series2.add(-20, (ir - 1) * 1000);
		this.series2.add(100, (ir - 1) * 1000);
		T = fldT.getTemperature();
		this.series3.add(T, 0);
		this.series3.add(T, 170);
		if (this.pointer == null) {
			// chart.getXYPlot().removeAnnotation(pointer);
			this.pointer = new XYPointerAnnotation("", 0, 0, 5 * Math.PI / 4.0);
			this.chart.getXYPlot().addAnnotation(this.pointer);
			this.pointer.setTipRadius(2.0);
			this.pointer.setBaseRadius(120.0);
			this.pointer.setFont(new Font("SansSerif", Font.BOLD, 12));
			this.pointer.setPaint(Color.blue);
			this.pointer.setTextAnchor(TextAnchor.BOTTOM_CENTER);
		}
		int idx = 0;
		for (int C = (int) T - 25; C < (int) T + 25; C += 1) {
			t = Utils.C2F(C);
			cr = ir * SG60(t) / SG60(tc);
			this.series1.add(C, (cr - 1) * 1000);
			// this.series1.updateByIndex(idx++, (cr-1)*1000);
		}
		this.pointer.setText("Lettura corretta = " + NumberFormatter.format03(CR));
		this.pointer.setX(T);
		this.pointer.setY((CR - 1) * 1000);
		this.chart.getXYPlot().getDomainAxis().setUpperBound(T + 20);
		this.chart.getXYPlot().getDomainAxis().setLowerBound(T - 20);
		this.chart.getXYPlot().getRangeAxis().setUpperBound((CR - 1) * 1000 + 20);
		this.chart.getXYPlot().getRangeAxis().setLowerBound((CR - 1) * 1000 - 20);
	}

	private double SG60(double t) {
		return 1.00130346 - 1.34722124E-4 * t + 2.04052596E-6 * t * t - 2.32820948E-9 * t * t * t;
	}

	public class GlassPanel extends JPanel {
		/**
		 *
		 */
		private static final long serialVersionUID = 2959297637060444493L;
		ImageIcon glassIcon = new ImageIcon(CorrezioneDensimetro.class.getResource("/jmash/images/densimetro.gif"));
		Image glass = this.glassIcon.getImage();
		ImageIcon glassIcon2 = new ImageIcon(CorrezioneDensimetro.class.getResource("/jmash/images/dens2.gif"));
		ImageIcon backIcon = new ImageIcon(CorrezioneDensimetro.class.getResource("/jmash/images/back.gif"));
		Image glass2 = this.glassIcon2.getImage();
		Image back = this.backIcon.getImage();
		BufferedImage dest;
		BufferedImage dest2;
		BufferedImage destColor;
		Insets insets;
		int X = 80, Y = 400;

		public GlassPanel() {
			this.dest = new BufferedImage(this.X, this.Y, BufferedImage.TYPE_INT_ARGB);
			this.dest2 = new BufferedImage(this.X, this.Y, BufferedImage.TYPE_INT_ARGB);
			this.destColor = new BufferedImage(this.X, this.Y, BufferedImage.TYPE_INT_ARGB);
			Graphics2D destG2 = this.dest2.createGraphics();
			Graphics2D destG = this.dest.createGraphics();
			destG.drawImage(this.glass, 0, 0, this);
			destG2.drawImage(this.glass2, 0, 0, this);
			// destGColor.drawImage(glassColor, 0, 0, this);
			this.setPreferredSize(new Dimension(this.X, this.Y));
			this.setMaximumSize(new Dimension(this.X, this.Y));
			this.setMinimumSize(new Dimension(this.X, this.Y));
			this.setSize(new Dimension(this.X, this.Y));
		}

		Color color = Main.treeColor.ebcToRgb(30.0);
		int step = 10;
		int DELTA = 100;

		@Override
		public void paint(Graphics g) {
			if (this.insets == null) {
				this.insets = getInsets();
			}
			g.translate(this.insets.left, this.insets.top);
			Graphics2D g2d = (Graphics2D) g;
			Graphics2D destG = this.dest.createGraphics();
			destG.setColor(Color.WHITE);
			destG.fillRect(0, 0, this.X, this.Y);
			destG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f));
			destG.drawImage(this.back, 0, this.DELTA - this.step, this);
			destG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.3f));
			destG.setColor(this.color);
			destG.fillRect(0, this.DELTA + 5, this.X, this.Y - this.DELTA);
			destG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
			destG.drawImage(this.glass, 0, this.DELTA - this.step, this);
			destG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
			destG.setColor(this.color);
			destG.fillRect(0, this.DELTA, this.X, this.Y - this.DELTA);
			destG.drawImage(this.dest2, 0, this.DELTA - this.step, this);
			destG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.1f));
			destG.setColor(this.color);
			destG.fillRect(0, this.DELTA, this.X, this.Y - this.DELTA);
			destG.setColor(Color.BLACK);
			destG.drawRect(0, this.DELTA, this.X - 1, this.Y - this.DELTA - 1);
			destG.setColor(Color.BLACK);
			destG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
			destG.drawRect(0, 0, this.X - 1, this.Y - 1);
			g2d.drawImage(this.dest, 0, 0, this);
		}

		public void setDensita(double gg) {
			double g = (gg - 0.98) * 100;
			this.step = 20 + (int) (g * 11);
			this.repaint();
		}

	}

	public JPanel createDemoPanel() {
		JFreeChart lChart = createChart();
		this.dataset.addSeries(this.series1);
		this.dataset.addSeries(this.series2);
		this.dataset.addSeries(this.series3);
		int T = 0;
		for (int C = (int) T - 25; C < (int) T + 25; C += 1) {
			double t = Utils.C2F(C);
			double tc = 20, ir = 1;
			double cr = ir * SG60(t) / SG60(tc);
			this.series1.add(C, (cr - 1) * 1000);
		}
		this.chart.getXYPlot().setDataset(this.dataset);
		return new ChartPanel(lChart);

	}

	private JFreeChart chart = null;

	private JFreeChart createChart() {
		this.chart = createChart(this.dataset);
		return this.chart;
	}

	private JFreeChart createChart(final XYDataset dataset) {
		final JFreeChart chart1 = ChartFactory.createXYLineChart("", "Temperatura", "Densità", null,
				PlotOrientation.VERTICAL, true, // legend
				true, // tool tips
				false // URLs
		);
		chart1.setBackgroundPaint(Color.white);
		chart1.getXYPlot().getRenderer().setItemLabelsVisible(true);
		chart1.getXYPlot().getRenderer().setItemLabelPaint(Color.black);
		final XYPlot plot = chart1.getXYPlot();
		plot.getRenderer().setSeriesStroke(0, new BasicStroke(4f));
		plot.getRenderer().setSeriesStroke(1, new BasicStroke(2f));
		plot.getRenderer().setSeriesVisibleInLegend(false);
		plot.setForegroundAlpha(0.75f);
		plot.setDomainGridlinePaint(Color.gray);
		plot.setRangeGridlinePaint(Color.gray);
		plot.setBackgroundPaint(Color.white);
		plot.setDomainGridlinesVisible(true);
		plot.setRangeGridlinesVisible(true);
		final ValueAxis domainAxis = plot.getDomainAxis();
		domainAxis.setLowerMargin(0.0);
		domainAxis.setUpperMargin(0.0);
		chart1.getXYPlot().getDomainAxis().setUpperBound(100);
		chart1.getXYPlot().getDomainAxis().setLowerBound(0);
		chart1.getXYPlot().getRangeAxis().setUpperBound(166);
		chart1.getXYPlot().getRangeAxis().setLowerBound(-10);
		chart1.getXYPlot().getRenderer().setToolTipGenerator(new XYToolTipGenerator() {
			@Override
			public String generateToolTip(XYDataset ds, int s, int i) {
				double d0 = ds.getXValue(s, i);
				double y0 = ds.getYValue(s, i);
				String str = "";
				str = "Letti a " + d0 + "°C sarebbero " + NumberFormatter.format03(y0 / 1000 + 1);
				return str;
			}
		});
		return chart1;
	}
}
