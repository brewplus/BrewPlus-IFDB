/*
 * ModalInternalFrame.java
 *
 * Created on 18 aprile 2005, 19.48
 */
package jmash;

import java.awt.AWTEvent;
import java.awt.ActiveEvent;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.MenuComponent;
import java.awt.Point;

import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.MouseInputAdapter;

/**
 *
 * @author Alessandro
 */
public class ModalInternalFrame extends javax.swing.JInternalFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2233489845568313656L;
	private JInternalFrame parent = null;
	private JDesktopPane desktop = null;
	private Component pt = null;
	private InternalFrameAdapter fradapter = null;

	/** Creates new form ModalInternalFrame */
	public ModalInternalFrame() {
		initComponents();
		this.desktop = Main.desktopPane;
		this.desktop.add(this);
		init();
		setBorder(Utils.getDefaultBorder());
	}

	private void init() {
		this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.fradapter = new InternalFrameAdapter() {

			@Override
			public void internalFrameActivated(InternalFrameEvent e) {
				ModalInternalFrame.this.requestFocus();
				ModalInternalFrame.this.moveToFront();
				try {
					ModalInternalFrame.this.parent.setSelected(false);
					ModalInternalFrame.this.setSelected(true);
				} catch (java.beans.PropertyVetoException ex) {
				}
			}
		};
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents

		setClosable(true);
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setIconifiable(true);
		setMaximizable(true);
		setResizable(true);
		pack();
	}// GEN-END:initComponents

	public void centerParent(JInternalFrame parent) {
		int x;
		int y;

		Point topLeft = parent.getLocation();
		Dimension parentSize = parent.getSize();

		Dimension mySize = getSize();

		if (parentSize.width > mySize.width) {
			x = ((parentSize.width - mySize.width) / 2) + topLeft.x;
		} else {
			x = topLeft.x;
		}

		if (parentSize.height > mySize.height) {
			y = ((parentSize.height - mySize.height) / 2) + topLeft.y;
		} else {
			y = topLeft.y;
		}

		setLocation(x, y);
	}

	public synchronized void startModal(JInternalFrame parent) {
		this.parent = parent;
		parent.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		parent.addInternalFrameListener(this.fradapter);
		setVisible(true);
		final JPanel glass = new JPanel();
		glass.setOpaque(false);

		// Attach mouse listeners
		MouseInputAdapter adapter = new MouseInputAdapter() {
		};
		glass.addMouseListener(adapter);
		glass.addMouseMotionListener(adapter);
		// Change glass pane to our panel
		this.pt = parent.getGlassPane();
		parent.setGlassPane(glass);
		// Show glass pane, then modal dialog
		centerParent(parent);
		glass.setVisible(true);
		ModalInternalFrame.this.requestFocus();
		ModalInternalFrame.this.moveToFront();
		try {
			ModalInternalFrame.this.setSelected(true);
			parent.setClosed(false);
		} catch (java.beans.PropertyVetoException ex) {
		}
		try {
			if (SwingUtilities.isEventDispatchThread()) {
				EventQueue theQueue = getToolkit().getSystemEventQueue();
				while (isVisible() || isIcon()) {
					AWTEvent event = theQueue.getNextEvent();
					Object src = event.getSource();
					if (event instanceof ActiveEvent) {
						((ActiveEvent) event).dispatch();
					} else if (src instanceof Component) {
						((Component) src).dispatchEvent(event);
					} else if (src instanceof MenuComponent) {
						((MenuComponent) src).dispatchEvent(event);
					} else {
						// log.error("unable to dispatch event: " + event);
					}
				}
			} else {
				while (isVisible()) {
					wait();
				}
			}
		} catch (InterruptedException e) {
		}
	}

	@Override
	public void doDefaultCloseAction() {
		stopModal();
		super.doDefaultCloseAction();
	}

	synchronized void stopModal() {
		if (this.parent == null) {
			setVisible(false);
			return;
		}
		if (this.pt != null) {
			this.parent.setGlassPane(this.pt);
		}
		this.parent.getGlassPane().setVisible(false);
		this.parent.validate();
		if (this.fradapter != null) {
			this.parent.removeInternalFrameListener(this.fradapter);
		}
		try {
			this.parent.setSelected(true);
			this.parent.requestFocus();
			this.parent.moveToFront();
			setVisible(false);
		} catch (java.beans.PropertyVetoException ex) {
		}
		this.parent.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		notifyAll();
		this.parent = null;
	}

}
