/*

 *
 *  This file is part of BrewPlus.
 *
 *  BrewPlus is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  BrewPlus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BrewPlus; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package jmash;

import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.apache.log4j.Logger;

/**
 *
 * @author Alessandro
 */
public class PrintPreviewRicetta extends javax.swing.JInternalFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 758003729945417614L;
	private static Logger LOGGER = Logger.getLogger(PrintPreviewRicetta.class);

	/** Creates new form PrintPreviewRicetta */
	public PrintPreviewRicetta() {
		initComponents();

		this.jEditorPane1.setEditable(false);
		this.jEditorPane1.setContentType("text/html");
		StringBuffer contents = new StringBuffer();
		try {
			this.jEditorPane1.setContentType("text/html");
			File aFile = new File(Main.printTemplate);

			// declared here only to make visible to finally clause
			BufferedReader input = null;
			try {
				// use buffering, reading one line at a time
				// FileReader always assumes default encoding is OK!
				input = new BufferedReader(new FileReader(aFile));
				String line = null; // not declared within while loop
				/*
				 * readLine is a bit quirky : it returns the content of a line
				 * MINUS the newline. it returns null only for the END of the
				 * stream. it returns an empty String if two newlines appear in
				 * a row.
				 */
				while ((line = input.readLine()) != null) {
					contents.append(line);
					System.out.println("line=" + line);
				}
			} catch (FileNotFoundException ex) {
				LOGGER.error(ex.getMessage(), ex);
			} catch (IOException ex) {
				LOGGER.error(ex.getMessage(), ex);
			}
			this.jEditorPane1.setText(contents.toString());
		} catch (Exception ex) {
			LOGGER.error(ex.getMessage(), ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		this.jToolBar1 = new javax.swing.JToolBar();
		this.jButton1 = new javax.swing.JButton();
		this.jScrollPane1 = new javax.swing.JScrollPane();
		this.jEditorPane1 = new jmash.component.PrintableEditorPane();

		setClosable(true);
		setIconifiable(true);
		setResizable(true);
		setTitle("Print preview");
		this.jButton1.setText("jButton1");
		this.jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		this.jToolBar1.add(this.jButton1);

		getContentPane().add(this.jToolBar1, java.awt.BorderLayout.NORTH);

		this.jScrollPane1.setViewportView(this.jEditorPane1);

		getContentPane().add(this.jScrollPane1, java.awt.BorderLayout.CENTER);

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		setBounds((screenSize.width - 495) / 2, (screenSize.height - 428) / 2, 495, 428);
	}// GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		PrinterJob job = PrinterJob.getPrinterJob();
		job.setPrintable((jmash.component.PrintableEditorPane) this.jEditorPane1);
		if (job.printDialog()) {
			try {
				job.print();
			} catch (Exception ex) {
				System.out.println(ex);
			}
		}

		/*
		 * java.awt.PrintJob pj =
		 * java.awt.Toolkit.getDefaultToolkit().getPrintJob(Main.gui,
		 * "Visualization Service Print", new java.util.Properties());
		 * java.awt.Graphics g = pj.getGraphics(); jEditorPane1.printAll(g);
		 * g.dispose(); pj.end();
		 */
	}// GEN-LAST:event_jButton1ActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JEditorPane jEditorPane1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar jToolBar1;
	// End of variables declaration//GEN-END:variables

}
