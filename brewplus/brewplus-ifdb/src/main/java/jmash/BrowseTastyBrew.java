/*
 *  Copyright 2006, 2007, 2008 Alessandro Chiari.
 *
 *  This file is part of BrewPlus.
 *
 *  BrewPlus is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  BrewPlus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BrewPlus; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package jmash;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingConstants;

import org.apache.log4j.Logger;

public class BrowseTastyBrew extends javax.swing.JInternalFrame {
	private static Logger LOGGER = Logger.getLogger(BrowseTastyBrew.class);
	private List<StyleTreeNode> styleNodes = new ArrayList<StyleTreeNode>();
	private String html = "";
	GridLayout gl = new GridLayout();
	private static final int COLUMNS = 3;

	/** Creates new form BrowseTastyBrew */
	public BrowseTastyBrew() {
		initComponents();
		setBorder(Utils.getDefaultBorder());
		pnl.setBackground(Color.white);
		try {
			lblTitle.setIcon(new ImageIcon(new URL("http://www.tastybrew.com/images/tastybrew2.png")));
			html = Utils.download("http://tastybrew.com/newrcp/styleview.html").toLowerCase();
		} catch (Exception ex) {
			Utils.showException(ex, "", this);
		}
		int i = html.indexOf("<h2>Tastybrew Recipes: View by Style</h2>".toLowerCase());

		int j = html.indexOf("<b>", i);
		int k = html.indexOf("</b>", j);
		while (j >= 0 && k >= 0) {
			j = html.indexOf("<b>", i);
			k = html.indexOf("</b>", j);
			int m = html.indexOf(". ", j);
			if ((j >= 0 && k >= 0)) {
				String S = html.substring(j + 3, k);
				String T = S.substring(0, S.indexOf(". "));
				String D = S.substring(S.indexOf(". ") + 2);
				styleNodes.add(new StyleTreeNode(T, S));
			}
			i = k;
		}

		gl.setColumns(COLUMNS);
		gl.setRows(styleNodes.size() / COLUMNS + styleNodes.size() % COLUMNS);
		gl.setVgap(2);
		this.pnl.setLayout(gl);
		for (StyleTreeNode node : styleNodes) {
			this.pnl.add(node);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		pnl = new javax.swing.JPanel();
		lblTitle = new javax.swing.JLabel();

		setClosable(true);
		setIconifiable(true);
		setMaximizable(true);
		setResizable(true);
		setTitle("Ricette su TastyBrew.com");
		setFont(getFont());

		org.jdesktop.layout.GroupLayout pnlLayout = new org.jdesktop.layout.GroupLayout(pnl);
		pnl.setLayout(pnlLayout);
		pnlLayout.setHorizontalGroup(
				pnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 593, Short.MAX_VALUE));
		pnlLayout.setVerticalGroup(
				pnlLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 375, Short.MAX_VALUE));

		jScrollPane1.setViewportView(pnl);

		getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
		getContentPane().add(lblTitle, java.awt.BorderLayout.NORTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel lblTitle;
	private javax.swing.JPanel pnl;
	// End of variables declaration//GEN-END:variables

	public class StyleTreeNode extends JButton {
		/**
		 *
		 */
		private static final long serialVersionUID = 9142284801436841375L;
		private String idStile;
		private String stile;
		private String des;
		private JButton jb = new JButton("Torna a Tutti gli stili",
				new ImageIcon(BrowseHobbyBirra2.class.getResource("/jmash/images/up.png")));

		public StyleTreeNode(String stile, String des) {

			super(des, new ImageIcon(BrowseHobbyBirra2.class.getResource("/jmash/images/folder.png")));
			this.stile = stile;
			idStile = "" + stile;
			this.des = des;
			setAlignmentX(Component.LEFT_ALIGNMENT);
			setMaximumSize(BTN_DIM);
			setSize(BTN_DIM);
			setPreferredSize(BTN_DIM);
			setHorizontalAlignment(SwingConstants.LEFT);
			this.jb.setMaximumSize(BTN_DIM);
			this.jb.setSize(BTN_DIM);
			this.jb.setPreferredSize(BTN_DIM);
			this.setBorderPainted(false);
			this.setBackground(pnl.getBackground());
			this.jb.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					pnl.removeAll();
					gl.setColumns(COLUMNS);
					gl.setRows(styleNodes.size() / COLUMNS + styleNodes.size() % COLUMNS);

					gl.setVgap(2);
					for (StyleTreeNode node : styleNodes) {
						pnl.add(node);
					}
					pnl.updateUI();
				}
			});

			addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {

					Thread th = new Thread() {
						@Override
						public void run() {
							setEnabled(false);
							show();
							setEnabled(true);
						}
					};
					th.start();
				}
			});
		}

		public String getIdStile() {
			return this.idStile;
		}

		@Override
		public void show() {
			pnl.removeAll();
			Thread th = new Thread() {
				@Override
				public void run() {
					readRecipesForStyle(stile, jb);
				}
			};
			th.start();
			// pnl.add(jb,newConstraint(0));
			pnl.updateUI();
		}

		public String getDes() {
			return this.des;
		}

		public void setDes(String des) {
			this.des = des;
			setText(des);
		}
	}

	private Dimension BTN_DIM = new Dimension(240, 32);

	public GridBagConstraints newConstraint(int i) {
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new java.awt.Insets(2, 2, 2, 2);
		c.gridx = i % 4;
		c.gridy = i / 4;
		return c;
	}

	public void readRecipesForStyle(String style, JButton jb) {
		try {
			List<RecipeTreeNode> nodes = new ArrayList<RecipeTreeNode>();
			int i = html.indexOf(("<b>" + style + ". ").toLowerCase()) + ("<b>" + style + ". ").length();
			String sub = html.substring(html.indexOf("<ul>", i) + "<ul>".length(), html.indexOf("</ul>", i));
			String K = "<li><a href=\"/newrcp/detail/";
			while (sub.indexOf(K) >= 0) {
				int h = sub.indexOf(K) + K.length();
				int k = sub.indexOf("\">", h);
				int l = sub.indexOf("</a>", k);

				String nome = sub.substring(k + "\">".length(), l);
				RecipeTreeNode N = new RecipeTreeNode(new Integer(sub.substring(h, k)), nome);
				nodes.add(N);
				if (sub.indexOf(K, k) >= 0)
					sub = sub.substring(sub.indexOf(K, k));
				else
					break;
			}

			i = 0;/*
					 * pnl.add(jb,newConstraint(i++)); Collections.sort(nodes);
					 * for(RecipeTreeNode node: nodes){ node.setDes(i+") "
					 * +node.getDes() ); pnl.add(node,newConstraint(i++)); }
					 */
			gl.setColumns(1);
			gl.setRows(nodes.size() + 1);
			gl.setVgap(2);
			i = 0;
			this.pnl.add(jb);
			for (RecipeTreeNode node : nodes) {
				this.pnl.add(node);
			}

		} catch (Exception ex) {
			Utils.showException(ex, "", this);
		}
	}

	public class RecipeTreeNode extends JButton implements Comparable<RecipeTreeNode> {
		private int id;
		private String des;

		public RecipeTreeNode(int id, String des) {

			super(des, new ImageIcon(BrowseHobbyBirra2.class.getResource("/jmash/images/ingredients.jpg")));
			this.id = id;
			this.des = des;
			setAlignmentX(Component.LEFT_ALIGNMENT);
			setMaximumSize(BTN_DIM);
			setSize(BTN_DIM);
			setPreferredSize(BTN_DIM);
			setHorizontalAlignment(SwingConstants.LEFT);

			this.id = id;

			setHorizontalAlignment(SwingConstants.LEFT);
			this.setBorderPainted(false);
			this.setBackground(pnl.getBackground());
			addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					Thread th = new Thread() {
						@Override
						public void run() {
							setEnabled(false);
							show();
							setEnabled(true);
						}
					};
					th.start();
				}
			});
		}

		@Override
		public int compareTo(RecipeTreeNode e) {
			return des.compareTo(e.getDes());
		}

		@Override
		public void show() {
			parseRecipe(id, des);

		}

		public String getDes() {
			return this.des;
		}

		public void setDes(String des) {
			this.des = des;
			setText(des);
		}
	}

	public static void parseRecipe(int n, String des) {
		String str = null;
		RecipeData rd = new RecipeData();
		try {
			str = Utils.download("http://tastybrew.com/newrcp/detail/" + n).toLowerCase();
		} catch (Exception ex) {
			LOGGER.error(ex.getMessage(), ex);
		}

		str = str.replace("\t", " ");
		str = str.replace("\r", "\n");
		while (str.indexOf("  ") >= 0)
			str = str.replace("  ", " ");
		str = str.replace(" \n", "\n");
		while (str.indexOf("\n\n") >= 0)
			str = str.replace("\n\n", "\n");
		String K = "<th class=\"tb_row_header2\">color</th>";
		String str2 = str.substring(str.indexOf(K) + K.length(),
				str.indexOf("<div class=\"formtitle\">", str.indexOf(K) + K.length()));
		str2 = str2.replace("</tr>", "");
		// System.out.println(""+str);
		// String S=str.substring(str.indexOf("<div class=\"formTitle\">"));

		String s[] = str2.split("\n");
		String w = "";

		List<Malt> malts = new ArrayList<Malt>();
		List<Hop> hops = new ArrayList<Hop>();
		List<Yeast> yeasts = new ArrayList<Yeast>();
		Malt m = null;
		int i = 0;
		for (int j = 0; j < s.length; j++) {
			String S = s[j];

			if (S.indexOf("<tr ") >= 0) {
				if (m != null)
					malts.add(m);
				m = new Malt();
				i = 0;
			}
			if (S.indexOf("<td ") >= 0) {
				K = "<td align=\"center\">";
				if (i == 1) {
					String N = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					Double d = new Double(N);
					m.setGrammi(Utils.poundToKg(d * 1000));
				}

				if (i == 2) {
					String nome = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					MaltType T = Main.getMaltTypeByWords(nome);
					Double d = m.getGrammi();
					if (T != null)
						m = new Malt(T);
					m.setNome(nome);
					m.setGrammi(d);
				}
				if (i == 5) {
					String N = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					Double d = new Double(N);
					m.setEbc(Utils.srmToEbc(d));
				}
				i++;
			}
		}
		if (m != null)
			malts.add(m);

		K = "<th class=\"tb_row_header2\">hop</th>";
		str2 = str.substring(str.indexOf(K) + K.length(),
				str.indexOf("<td class=\"totalrow\">&nbsp;</td>", str.indexOf(K) + K.length()));
		str2 = str2.replace("</tr>", "");
		// String S=str.substring(str.indexOf("<div class=\"formTitle\">"));

		s = str2.split("\n");
		w = "";

		Hop h = null;
		i = 0;
		for (int j = 0; j < s.length; j++) {
			String S = s[j];
			// System.out.println(S);
			if (S.indexOf("<tr ") >= 0) {
				if (h != null)
					hops.add(h);
				h = new Hop();
				i = 0;
			}
			if (S.indexOf("<td ") >= 0) {
				K = "<td align=\"center\">";
				if (i == 1) {
					String N = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					Double d = new Double(N);
					h.setGrammi(Utils.ouncesToGrams(d));
				}

				if (i == 2) {
					String nome = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					h.setNome(nome);
				}
				if (i == 5) {
					String N = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					Double d = new Double(N);
					h.setAlfaAcidi(d);
				}
				if (i == 7) {
					String N = S.substring(S.indexOf(K) + K.length(), S.indexOf("</td>", S.indexOf(K)));
					if (N.equalsIgnoreCase("fwh")) {
						h.setUso("First wort hop");
						h.setBoilTime(0);
					} else {
						Integer d = new Integer(N);
						h.setBoilTime(d);
					}
				}
				i++;
			}
		}
		if (h != null)
			hops.add(h);

		rd.setMalts(malts);
		rd.setHops(hops);
		rd.setYeasts(yeasts);
		rd.setNome(des);
		Ricetta R = new Ricetta();
		R.fromRecipeData(rd);
		Main.gui.addFrame(R);
	}
}
