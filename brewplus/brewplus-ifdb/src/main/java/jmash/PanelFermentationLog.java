/*
 
 *
 *  This file is part of BrewPlus.
 *
 *  BrewPlus is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  BrewPlus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BrewPlus; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package jmash;

import com.toedter.calendar.JDateChooserCellEditor;
import java.awt.BasicStroke;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import jmash.tableModel.FermentationLogTableModel;
import jmash.tableModel.NumberFormatter;
import org.jdom.Element;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author AChiari
 */
public class PanelFermentationLog extends javax.swing.JPanel {

	public FermentationLogTableModel tableModel;
	private Ricetta ricetta;
	private JInternalFrame parentFrame;
	private AlcoolContent alcoolContent = new AlcoolContent();

	public PanelFermentationLog(Ricetta r, JInternalFrame parentFrame) {
		this.ricetta = r;
		this.parentFrame = parentFrame;
		initComponents();
		this.tableModel = new FermentationLogTableModel(this);
		this.tblMashSteps.setModel(this.tableModel);
		tblMashSteps.setDefaultEditor(Date.class, new JDateChooserCellEditor());
		tblMashSteps.getColumnModel().getColumn(0).setPreferredWidth(96);
		tblMashSteps.getColumnModel().getColumn(1).setPreferredWidth(32);
		tblMashSteps.getColumnModel().getColumn(2).setPreferredWidth(32);
		tblMashSteps.getColumnModel().getColumn(3).setPreferredWidth(32);
		tblMashSteps.getColumnModel().getColumn(4).setPreferredWidth(32);
		add(createDemoPanel(), java.awt.BorderLayout.CENTER);
		jPanel5.add(alcoolContent.getResultPanel(), java.awt.BorderLayout.SOUTH);

	}

	TimeSeries lTimeSeries1 = new TimeSeries("", org.jfree.data.time.Day.class);
	TimeSeries lTimeSeries2 = new TimeSeries("", org.jfree.data.time.Day.class);
	TimeSeries lTimeSeries3 = new TimeSeries("", org.jfree.data.time.Day.class);

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		jPanel5 = new javax.swing.JPanel();
		jScrollPane5 = new javax.swing.JScrollPane();
		tblMashSteps = new javax.swing.JTable();
		jPanel1 = new javax.swing.JPanel();
		btnAdd3 = new javax.swing.JButton();
		btnRem3 = new javax.swing.JButton();
		jSplitPane1 = new javax.swing.JSplitPane();

		setLayout(new java.awt.BorderLayout());

		jPanel5.setLayout(new java.awt.BorderLayout(5, 0));

		jScrollPane5.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
		jScrollPane5.setMinimumSize(null);
		jScrollPane5.setPreferredSize(new java.awt.Dimension(200, 120));
		jScrollPane5.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
			public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
				jScrollPane5MouseWheelMoved(evt);
			}
		});

		tblMashSteps.setPreferredSize(null);
		tblMashSteps.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
			public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
				tblMashStepsMouseWheelMoved(evt);
			}
		});

		jScrollPane5.setViewportView(tblMashSteps);

		jPanel5.add(jScrollPane5, java.awt.BorderLayout.CENTER);

		jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 2));

		jPanel1.setPreferredSize(new java.awt.Dimension(36, 46));
		btnAdd3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmash/images/edit_add.png")));
		btnAdd3.setToolTipText(java.util.ResourceBundle.getBundle("jmash/lang").getString("Aggiungi"));
		btnAdd3.setAlignmentX(0.5F);
		btnAdd3.setMaximumSize(new java.awt.Dimension(30, 30));
		btnAdd3.setMinimumSize(new java.awt.Dimension(30, 30));
		btnAdd3.setPreferredSize(new java.awt.Dimension(36, 36));
		btnAdd3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnAdd3ActionPerformed(evt);
			}
		});

		jPanel1.add(btnAdd3);

		btnRem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmash/images/edit_remove.png")));
		btnRem3.setToolTipText(java.util.ResourceBundle.getBundle("jmash/lang").getString("Rimuovi"));
		btnRem3.setAlignmentX(0.5F);
		btnRem3.setMaximumSize(new java.awt.Dimension(30, 30));
		btnRem3.setMinimumSize(new java.awt.Dimension(30, 30));
		btnRem3.setPreferredSize(new java.awt.Dimension(36, 36));
		btnRem3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnRem3ActionPerformed(evt);
			}
		});

		jPanel1.add(btnRem3);

		jPanel5.add(jPanel1, java.awt.BorderLayout.EAST);

		add(jPanel5, java.awt.BorderLayout.WEST);

		jSplitPane1.setDividerLocation(50);
		jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
		add(jSplitPane1, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void btnRem3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRem3ActionPerformed
		if (!tblMashSteps.isEnabled())
			return;
		this.tableModel.remRow(this.tblMashSteps.getSelectedRow());
		logModificato();
	}// GEN-LAST:event_btnRem3ActionPerformed

	private static GregorianCalendar calendar = new GregorianCalendar();

	private void btnAdd3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAdd3ActionPerformed
		SGLog step = new SGLog();
		SGLog prev = tableModel.getLastRow();
		if (prev != null) {
			calendar.setTime(prev.getData());
			calendar.add(GregorianCalendar.DAY_OF_YEAR, 1);
			step.setData(calendar.getTime());
			step.setT(prev.getT() * 0.7);
			step.setSG(1 + ((prev.getSG() - 1) * 0.8));
			step.setPH(prev.getPH() * 0.9);
		}
		this.tableModel.addRow(step);
		logModificato();
	}// GEN-LAST:event_btnAdd3ActionPerformed

	private void jScrollPane5MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {// GEN-FIRST:event_jScrollPane5MouseWheelMoved

	}// GEN-LAST:event_jScrollPane5MouseWheelMoved

	private void tblMashStepsMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {// GEN-FIRST:event_tblMashStepsMouseWheelMoved

	}// GEN-LAST:event_tblMashStepsMouseWheelMoved

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnAdd3;
	private javax.swing.JButton btnRem3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JTable tblMashSteps;

	// End of variables declaration//GEN-END:variables
	public void logModificato() {
		this.lTimeSeries1.clear();
		this.lTimeSeries2.clear();
		this.lTimeSeries3.clear();
		double minSG = 100, maxSG = 0;
		double minPH = 100, maxPH = -1;
		for (SGLog m : tableModel.getRows()) {
			lTimeSeries1.addOrUpdate(new Day(m.getData()), m.getT());
			lTimeSeries2.addOrUpdate(new Day(m.getData()), m.getPH());
			lTimeSeries3.addOrUpdate(new Day(m.getData()), m.getSG());
			if (m.getSG() > maxSG)
				maxSG = m.getSG();
			if (m.getSG() < minSG)
				minSG = m.getSG();
			if (m.getPH() > maxPH)
				maxPH = m.getPH();
			if (m.getPH() < minPH)
				minPH = m.getPH();
		}
		this.lTimeSeries1.fireSeriesChanged();
		this.lTimeSeries2.fireSeriesChanged();
		this.lTimeSeries3.fireSeriesChanged();
		XYPlot plot = chart.getXYPlot();

		NumberAxis axis = (NumberAxis) plot.getRangeAxis(1);
		if (maxPH < minPH)
			maxPH = minPH;
		if (maxSG < minSG)
			maxSG = minSG;
		axis.setRange(minPH * 0.9, maxPH * 1.1);
		axis = (NumberAxis) plot.getRangeAxis(2);
		axis.setRange(((minSG - 1) * 1000 * 0.9 + 1000) / 1000, ((maxSG - 1) * 1000 * 1.1 + 1000) / 1000);
		alcoolContent.setOG(maxSG);
		alcoolContent.setFG(minSG);
	}

	JFreeChart chart = null;

	public JPanel createDemoPanel() {
		XYSeriesCollection dataset = new XYSeriesCollection();
		chart = createChart(dataset);
		return new ChartPanel(chart);
	}

	private JFreeChart createChart(final XYDataset dataset) {
		// final JFreeChart chart = ChartFactory.createXYLineChart(
		JFreeChart chart1 = ChartFactory.createTimeSeriesChart("", "Giorni", "Temperatura ", (XYDataset) null, false, // legend
				false, // tool tips
				false // URLs
		);
		chart1.setBackgroundPaint(Color.white);

		chart1.getXYPlot().getRenderer().setItemLabelsVisible(true);
		chart1.getXYPlot().getRenderer().setItemLabelPaint(Color.black);

		final XYPlot plot = chart1.getXYPlot();
		DateAxis lXYAxis = (DateAxis) plot.getDomainAxis();
		lXYAxis.setDateFormatOverride(new SimpleDateFormat("dd-MMM"));
		plot.setForegroundAlpha(1.0f);

		plot.setDomainGridlinePaint(Color.gray);
		plot.setRangeGridlinePaint(Color.gray);
		plot.setBackgroundPaint(Color.white);
		plot.setDomainGridlinesVisible(true);
		plot.setRangeGridlinesVisible(true);

		// final ValueAxis domainAxis = plot.getDomainAxis();

		NumberAxis axis = new NumberAxis("Â°C");
		// axis.setLowerMargin(0.0);
		// axis.setUpperMargin(30.0);
		// axis.setAutoRangeIncludesZero(false);
		axis.setLabelPaint(Color.BLUE);
		axis.setTickLabelPaint(Color.BLUE);
		axis.setNumberFormatOverride(new NumberFormatter("0.0"));
		plot.setRangeAxis(0, axis);
		plot.setRangeAxisLocation(0, AxisLocation.BOTTOM_OR_LEFT);
		// AXIS 2
		NumberAxis axis2 = new NumberAxis("pH");

		// axis2.setAutoRangeIncludesZero(false);
		axis2.setLabelPaint(Color.MAGENTA);
		axis2.setTickLabelPaint(Color.MAGENTA);
		axis2.setNumberFormatOverride(new NumberFormatter("0.0"));
		plot.setRangeAxis(1, axis2);
		plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_RIGHT);
		// AXIS 3
		NumberAxis axis3 = new NumberAxis("SG");
		// axis3.setAutoRangeIncludesZero(false);
		axis3.setLabelPaint(Color.RED);

		axis3.setTickLabelPaint(Color.RED);
		axis3.setNumberFormatOverride(new NumberFormatter("0.000"));
		plot.setRangeAxis(2, axis3);
		plot.setRangeAxisLocation(2, AxisLocation.BOTTOM_OR_LEFT);

		TimeSeriesCollection lDataset = new TimeSeriesCollection();
		TimeSeriesCollection lDataset2 = new TimeSeriesCollection();
		TimeSeriesCollection lDataset3 = new TimeSeriesCollection();
		lDataset.addSeries(lTimeSeries1);
		lDataset2.addSeries(lTimeSeries2);
		lDataset3.addSeries(lTimeSeries3);
		chart1.getXYPlot().setDataset(0, lDataset);
		chart1.getXYPlot().setDataset(1, lDataset2);
		chart1.getXYPlot().setDataset(2, lDataset3);

		plot.mapDatasetToRangeAxis(0, 0);
		plot.mapDatasetToRangeAxis(1, 1);
		plot.mapDatasetToRangeAxis(2, 2);
		plot.setRenderer(1, new StandardXYItemRenderer());
		plot.setRenderer(2, new StandardXYItemRenderer());
		plot.getRenderer(0).setSeriesPaint(0, Color.BLUE);
		plot.getRenderer(1).setSeriesPaint(0, Color.MAGENTA);
		plot.getRenderer(2).setSeriesPaint(0, Color.RED);
		plot.getRenderer(0).setStroke(new BasicStroke(2f));
		plot.getRenderer(1).setStroke(new BasicStroke(2f));
		plot.getRenderer(2).setStroke(new BasicStroke(2f));
		return chart1;
	}

	public Element toXml() {
		Element root = new Element("fermentazione");
		for (SGLog m : tableModel.getRows()) {
			root.addContent(m.toXml());
		}
		return root;
	}

	public void add(SGLog e) {
		tableModel.addRow(e);
	}

	public void svuota() {
		tableModel.remAllRows();
	}

}
